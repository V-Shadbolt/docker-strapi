name: Publish Docker Image

on:
  push:
    paths:
      - 'release-versions/*'

jobs:
  tags:
    name: Get Tags
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.vars.outputs.TAG }}
      latest: ${{ steps.vars.outputs.LATEST }}

    steps:
      - name: Get Current Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Changed Release Files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: release-versions/**

      - name: Get Tag and Latest
        id: vars
        run: |
          if echo "${{ steps.changed-files.outputs.modified_files }}" | grep -q 'strapi-v5-latest.txt'; then
            echo "TAG=$(cat release-versions/strapi-v5-latest.txt)" >> "$GITHUB_OUTPUT"
            echo "LATEST=latest" >> "$GITHUB_OUTPUT"
          else
            echo "TAG=$(cat release-versions/strapi-v4-latest.txt)" >> "$GITHUB_OUTPUT"
            echo "LATEST=latest-v4" >> "$GITHUB_OUTPUT"
          fi  

  test-image:
    name: Test Debian Image
    needs: [tags]
    runs-on: ubuntu-latest

    env:
      TAG: ${{ needs.tags.outputs.tag }}
      POSTGRES_HOST: 172.17.0.1
      MYSQL_HOST: 172.17.0.1

    strategy:
      matrix:
        upgrade-path:
          - version: '4'
            old_version: 4.15.0
          - version: '5'
            old_version: 5.0.0
      
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: strapi
          POSTGRES_PASSWORD: strapi
          POSTGRES_DB: strapi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mysql:
        image: bitnami/mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: strapi
          MYSQL_USER: strapi
          MYSQL_PASSWORD: strapi
          MYSQL_DATABASE: strapi
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 3306:3306
    
    steps:
      - name: Get Current Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build Latest v${{ matrix.upgrade-path.version }} Strapi Image and Export to Docker
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        uses: docker/build-push-action@v6
        with:
          load: true
          context: ./images/strapi-debian
          build-args: |
            STRAPI_VERSION=${{ env.TAG }}
            NODE_VERSION=18
            NODE=node
            GITHUB_ACTIONS=1
          tags: ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:latest

      - name: Test Latest v${{ matrix.upgrade-path.version }} Strapi Image with SQLite
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        timeout-minutes: 10
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:latest

      - name: Test Latest v${{ matrix.upgrade-path.version }} Strapi Image with PostgreSQL
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        timeout-minutes: 10
        run: |
          docker run --rm \
            -e DATABASE_CLIENT=postgres \
            -e DATABASE_HOST=${{ env.POSTGRES_HOST }} \
            -e DATABASE_PORT=5432 \
            -e DATABASE_NAME=strapi \
            -e DATABASE_USERNAME=strapi \
            -e DATABASE_PASSWORD=strapi \
            ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:latest
      
      - name: Test Latest v${{ matrix.upgrade-path.version }} Strapi Image with MySQL
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        timeout-minutes: 10
        run: |
          docker run --rm \
            -e DATABASE_CLIENT=mysql \
            -e DATABASE_HOST=${{ env.MYSQL_HOST }} \
            -e DATABASE_PORT=3306 \
            -e DATABASE_NAME=strapi \
            -e DATABASE_USERNAME=strapi \
            -e DATABASE_PASSWORD=strapi \
            ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:latest

      - name: Test Latest v4 Strapi Image with MySQL2
        if: ${{ matrix.upgrade-path.version == '4' }}
        timeout-minutes: 10
        run: |
          docker run --rm \
            -e DATABASE_CLIENT=mysql2 \
            -e DATABASE_HOST=${{ env.MYSQL_HOST }} \
            -e DATABASE_PORT=3306 \
            -e DATABASE_NAME=strapi \
            -e DATABASE_USERNAME=strapi \
            -e DATABASE_PASSWORD=strapi \
            ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:latest
      
      - name: Create Temp Volume
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        run: |
          mkdir ${{ runner.temp }}/strapi-${{ matrix.upgrade-path.version }}-${{ github.run_id }}
      
      - name: Build Old v${{ matrix.upgrade-path.version }} Strapi Image and Export to Docker
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        uses: docker/build-push-action@v6
        with:
          load: true
          context: ./images/strapi-debian
          build-args: |
            STRAPI_VERSION=${{ matrix.upgrade-path.old_version }}
            NODE_VERSION=18
            NODE=node
            GITHUB_ACTIONS=1
          tags: ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:old

      - name: Init Old v${{ matrix.upgrade-path.version }} Strapi Image with SQLite
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        timeout-minutes: 10
        run: |
          docker run --rm -v ${{ runner.temp }}/strapi-${{ matrix.upgrade-path.version }}-${{ github.run_id }}:/srv/app ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:old
        
      - name: Test Upgrade from v${{ matrix.upgrade-path.version }} to Latest Strapi Image with SQLite
        if: ${{ matrix.upgrade-path.version == '4' || (matrix.upgrade-path.version == '5' && startsWith(needs.tags.outputs.tag, '5')) }}
        timeout-minutes: 10
        run: |
          docker run --rm -v ${{ runner.temp }}/strapi-${{ matrix.upgrade-path.version }}-${{ github.run_id }}:/srv/app ${{ secrets.DOCKER_USERNAME }}/strapi-${{ matrix.upgrade-path.version }}:latest

  build-and-push:
    name: Build and Push Images
    needs: [tags, test-image]
    runs-on: ubuntu-latest

    env:
      TAG: ${{ needs.tags.outputs.tag }}
      LATEST: ${{ needs.tags.outputs.latest }}

    strategy:
      matrix:
        os: [debian, alpine]
        arch:
          - platform: linux/amd64
            node: node
          - platform: linux/arm64
            node: arm64v8/node

    steps:
      - name: Get Current Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}      
      
      - name: Build and Push ${{ matrix.os }} (${{ matrix.arch.platform }})
        uses: docker/build-push-action@v6
        with:
          context: ./images/strapi-${{ matrix.os }}
          platforms: ${{ matrix.arch.platform }}
          build-args: |
            STRAPI_VERSION=${{ env.TAG }}
            NODE_VERSION=18
            NODE=${{ matrix.arch.node }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/strapi:${{ env.TAG }}${{ matrix.os == 'alpine' && '-alpine' || '' }}${{ matrix.arch.platform == 'linux/arm64' && '-arm64' || '' }}
            ${{ secrets.DOCKER_USERNAME }}/strapi:${{ env.LATEST }}${{ matrix.os == 'alpine' && '-alpine' || '' }}${{ matrix.arch.platform == 'linux/arm64' && '-arm64' || '' }}

  release:
    name: Release
    needs: [tags, build-and-push]
    runs-on: ubuntu-latest

    env:
      TAG: ${{ needs.tags.outputs.tag }}

    permissions:
      contents: write

    strategy:
      matrix:
        version: [v4, v5]

    steps:
      - name: Get Current Repository
        uses: actions/checkout@v4

      - name: Create Release in GitHub
        if: |
          (matrix.version == 'v4' && startsWith(env.TAG, '4')) ||
          (matrix.version == 'v5' && startsWith(env.TAG, '5'))
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.TAG }}
          prerelease: false
          draft: false
          generate_release_notes: true
          name: Release ${{ env.TAG }}
          body: Strapi v${{ env.TAG }}
          make_latest: ${{ matrix.version == 'v5' }}
